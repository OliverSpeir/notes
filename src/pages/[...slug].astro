---
import { getCollection } from "astro:content";
import Footer from "../components/Footer.astro";
import Sidebar from "../components/Sidebar.astro"
import Bottombar from "../components/Bottombar.astro";
import Meta from "../components/Meta.astro";
import type { CollectionEntry } from "astro:content";
import CopyCodeButtonScript from "../components/CopyCodeButtonScript.astro"
import "../styles/style.css"
import type { MarkdownHeading } from "astro";

export async function getStaticPaths() {
  const notes = await getCollection("notes");
  return notes.map((note: CollectionEntry<"notes">) => ({
    params: { slug: note.slug },
    props: { note },
  }));
}

type Props = {
  note: CollectionEntry<"notes">
}
const { note }  = Astro.props;

const { Content, headings } = await note.render();

const findRelatedNotes = (
  currentNote: CollectionEntry<"notes">,
  allNotes: CollectionEntry<"notes">[]
) => {
  const currentSlugPath = currentNote.slug.split("/");
  const relatedNotes = allNotes
    .filter((note) => note.slug !== currentNote.slug)
    .filter((note) => {
      const slugPath = note.slug.split("/");
      if (currentSlugPath.length === 1 && slugPath.length === 1) {
        return true;
      }
      return (
        slugPath.length >= 2 &&
        (slugPath.slice(0, -1).join("/") ===
          currentSlugPath.slice(0, -1).join("/") ||
          slugPath[0] === currentSlugPath[0])
      );
    })
    .map((note) => {
      return {
        slug: note.slug,
        text: note.id.split("/").pop()?.split(".")[0] || ""
      };
    });

  return relatedNotes;
};
export type RelatedType = ReturnType<typeof findRelatedNotes>;

const checkIfContainsMarkdownCodeBlock = (noteBody: CollectionEntry<"notes">['body']): boolean => {
    const codeBlockRegex = /```[^`]*```/g;
    return codeBlockRegex.test(noteBody);
}  

const notes = await getCollection("notes");
const related = findRelatedNotes(note, notes);
const headingsWithDepth2 = headings.filter((heading) => heading.depth === 2);
function removeSectionFromText(headings: MarkdownHeading[]) {
  return headings.map(item => {
    const index = item.text.indexOf("Section"); // Find the index of "Section"

    if (index !== -1) {
      return {
        ...item,
        text: item.text.slice(0, index).trim() // Remove everything after and including "Section"
      };
    }

    return item; // Return item unchanged if "Section" not found
  });
}
const updatedHeadings = removeSectionFromText(headingsWithDepth2);
const noteTitle = note.id.split("/").pop()?.split(".")[0] || "";
const containsCode = checkIfContainsMarkdownCodeBlock(note.body)

---

<html lang="en">
  <head>
    <Meta/>
    {containsCode && <CopyCodeButtonScript/> }
    <title>{noteTitle}</title>
  </head>

  <body class="bg-zinc-100 dark:bg-zinc-800"  tabindex="0" >
    <!-- sidebar shows at tailwind xl: -->
    <Sidebar related={related}, headingsWithDepth2={updatedHeadings}/>
    <!-- bottom bar shows until xl: -->
    <Bottombar related={related}, headingsWithDepth2={updatedHeadings} />

    <article class="prose prose-zinc md:prose-lg lg:prose-xl prose-blockquote:bg-zinc-300 dark:prose-blockquote:bg-zinc-900 prose-blockquote:rounded-lg  mx-auto prose-li:my-0 dark:prose-blockquote:text-zinc-100 prose-blockquote:text-zinc-950  text-zinc-950 dark:prose-code:bg-zinc-400 prose-code:bg-zinc-300 prose-pre: prose-code:text-black prose-code:rounded-md prose-li:marker:text-zinc-950 prose-strong:text-zinc-950 prose-headings:text-black prose-a:text-blue-600 hover:prose-a:text-blue-900 dark:prose-strong:text-zinc-100 dark:text-zinc-100 dark:prose-li:marker:text-zinc-100 dark:prose-headings:text-zinc-50 dark:prose-a:text-blue-400 dark:hover:prose-a:text-blue-600 p-4 min-h-screen h-full break-words pb-14">
      <!-- this h1 matches the Obsidian schema where the filename displays as an h1 at top of each note -->
      <h1 class="mt-2">{noteTitle}</h1>
      <!-- github flavored markdown done automatically by astro (can be configured differently) -->
      <Content />
    </article>

    <Footer note={note}/>

  </body>
</html>