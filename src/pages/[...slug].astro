---
import { getCollection } from "astro:content";
import Footer from "../components/Footer.astro";
import Sidebar from "../components/Sidebar.astro"
import Bottombar from "../components/Bottombar.astro";
import Meta from "../components/Meta.astro";
import type { CollectionEntry } from "astro:content";

export async function getStaticPaths() {
  const notes = await getCollection("notes");
  return notes.map((note: CollectionEntry<"notes">) => ({
    params: { slug: note.slug },
    props: { note },
  }));
}

const { note }  = Astro.props as { note: CollectionEntry<"notes"> };

const { Content, headings } = await note.render();

const findRelatedNotes = (
  currentNote: CollectionEntry<"notes">,
  allNotes: CollectionEntry<"notes">[]
) => {
  const currentSlugPath = currentNote.slug.split("/");
  const relatedNotes = allNotes
    .filter((note) => note.slug !== currentNote.slug)
    .filter((note) => {
      const slugPath = note.slug.split("/");
      if (currentSlugPath.length === 1 && slugPath.length === 1) {
        return true;
      }
      return (
        slugPath.length >= 2 &&
        (slugPath.slice(0, -1).join("/") ===
          currentSlugPath.slice(0, -1).join("/") ||
          slugPath[0] === currentSlugPath[0])
      );
    })
    .map((note) => {
      return {
        slug: note.slug,
        text: note.id.split("/").pop()?.split(".")[0] || ""
      };
    });

  return relatedNotes;
};
export type RelatedType = ReturnType<typeof findRelatedNotes>;

const notes = await getCollection("notes");
const related = findRelatedNotes(note, notes);
const headingsWithDepth2 = headings.filter((heading) => heading.depth === 2);
const noteTitle = note.id.split("/").pop()?.split(".")[0] || "";
---

<html lang="en">
  <head>
    <Meta/>
    <title>{noteTitle}</title>
    <script>
      document.addEventListener("DOMContentLoaded", (event) => {
        const codeBlocks = document.querySelectorAll("pre");

        codeBlocks.forEach((codeBlock) => {
          const svgString1 = `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 stroke-white" fill="none" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5A3.375 3.375 0 006.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0015 2.25h-1.5a2.251 2.251 0 00-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 00-9-9z" />
                              </svg>`;

          const svgString2 = `<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 stroke-white" fill="none" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" d="M11.35 3.836c-.065.21-.1.433-.1.664 0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75 2.25 2.25 0 00-.1-.664m-5.8 0A2.251 2.251 0 0113.5 2.25H15c1.012 0 1.867.668 2.15 1.586m-5.8 0c-.376.023-.75.05-1.124.08C9.095 4.01 8.25 4.973 8.25 6.108V8.25m8.9-4.414c.376.023.75.05 1.124.08 1.131.094 1.976 1.057 1.976 2.192V16.5A2.25 2.25 0 0118 18.75h-2.25m-7.5-10.5H4.875c-.621 0-1.125.504-1.125 1.125v11.25c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V18.75m-7.5-10.5h6.375c.621 0 1.125.504 1.125 1.125v9.375m-8.25-3l1.5 1.5 3-3.75" />
                    </svg>`;

          const wrapper = document.createElement("div");
          wrapper.className = "relative group";

          const copyButton = document.createElement("button");
          copyButton.innerHTML = svgString1;
          copyButton.className =
            "copy-code-button bg-transparent absolute top-1 right-1 z-10 opacity-0 group-hover:opacity-100 transition-opacity";

          copyButton.addEventListener("click", () => {
            const code = codeBlock.innerText;
            navigator.clipboard.writeText(code);
            copyButton.innerHTML = svgString2;

            setTimeout(() => {
              copyButton.innerHTML = svgString1;
            }, 2000);
          });

          codeBlock.parentNode.insertBefore(wrapper, codeBlock);
          wrapper.appendChild(codeBlock);

          wrapper.appendChild(copyButton);
        });
      });
    </script>
  </head>

  <body class="bg-slate-200 dark:bg-gray-900"  tabindex="0">
    <!-- sidebar shows at tailwind xl: -->
    <Sidebar related={related}, headingsWithDepth2={headingsWithDepth2}/>
    <!-- bottom bar shows until then -->
    <Bottombar related={related}, headingsWithDepth2={headingsWithDepth2} />

    <article class="prose prose-li:marker:text-slate-600 dark:prose-li:marker:text-slate-300 dark:prose-invert mx-auto prose-xl p-4 min-h-screen h-full break-words pb-14">
      <!-- this h1 matches the Obsidian schema where the filename displays as an h1 at top of each note -->
      <h1 class="mt-2">{noteTitle}</h1>
      <!-- github flavored markdown done automatically by astro (can be configured differently) -->
      <Content />
    </article>

    <Footer note={note}/>

  </body>
</html>
